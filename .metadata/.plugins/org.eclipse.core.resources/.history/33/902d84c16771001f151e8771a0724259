package chapter16;
/*
	내부 클래스(Inner Class)
	: 다른 클래스 내부에 선언된 클래스를 의미
	
	= 장점 =
	: 코드의 가독성 향상 - 코드의 구조 파악에 용이
	: 클래스 간의 관계를 명확하게 함
	- 내부 클래스는 외부 클래스의 멤버에 쉽게 접근 가능
	
	= 종류 =
	1. 비정적 내부 클래스 (가장 기본적인 클래스 형태)
	: 외부 클래스의 인스턴스에 속함 
	> 외부 클래스의 인스턴스 변수 및 메서드에 직접 접근 O
	
	2. 정적 내부 클래스(스태틱 클래스)
	: "외부 클래스의 정적 멤버", 외부 클래스의 인스턴스 변수에 접근 X
	> 외부 클래스의 정적 멤버에만 접근 O (static)
	
*/
// 외부 클래스
class OuterClass {
	private String outerField = "외부 클래스의 필드"; // private라 main에 바로 접근 X - 내부클래스를 통해서 접근 해야함
	static String staticField = "외부 클래스 스태틱 필드"; // static - 모든인스턴스에서공유하는값
	
	// 비정적 내부 클래스 - 인스턴스 필드, 인스턴스 메서드 (인스턴스 해야만 쓸 수 있음 - static이 없어서)
	class InnerClass {
		void display() {
			System.out.println("외부 클래스 필드에 접근 : " + outerField);
		}
	}
	
	// 정적 내부 클래스 (스태틱 클래스)
	static class StaticClass {
		void display() {
			// System.out.println("외부 클래스 필드에 접근(인스턴스): " + outerField); 
			// - Error: Cannot make a static reference to the non-static field outerField
			System.out.println("외부 클래스 필드에 접근(정적): " + staticField);
		}
	}
}
public class A_Inner01 {
	public static void main(String[] args) {
		// === 비정적 내부 클래스 ===
		// 1) 외부 클래스 인스턴스화
		OuterClass outer1 = new OuterClass();
		
		// 2) 외부 클래스.내부 클래스 형식으로 내부 클래스를 초기화하여 사용
		// 외부클래스타입.내부클래스타입 변수 = 외부인스턴스.new 내부클래스();
		OuterClass.InnerClass inner = outer1.new InnerClass();
		inner.display(); // 외부 클래스 필드에 접근: 외부 클래스의 필드
	}
}
